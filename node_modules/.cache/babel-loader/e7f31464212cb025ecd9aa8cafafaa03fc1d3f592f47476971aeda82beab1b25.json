{"ast":null,"code":"var _jsxFileName = \"/Users/lojankarunakaran/Web development/React/Meme Generator/my-app/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let res;\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(res => res.json).then(data => setAllMemesData(data.data.memes));\n  }, []);\n  let [meme, setMemeState] = useState({\n    top_text: \"\",\n    bottom_text: \"\",\n    image: \"http://i.imgflip.com/1bij.jpg\"\n  });\n  let [allMemesData, setAllMemesData] = useState([]);\n  function getMemeImage() {\n    let rand_num = Math.floor(Math.random() * allMemesData.length);\n    setMemeState(prev => ({\n      ...prev,\n      image: allMemesData[rand_num].url\n    }));\n  }\n  function handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setMemeState(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"top_text\",\n        type: \"text\",\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"bottom_text\",\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"output-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getMemeImage,\n        children: \"Get a new meme image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"meme\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: meme.image,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"meme--text top\",\n          children: meme.top_text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"meme--text bottom\",\n          children: meme.bottom_text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"yFgbxcmxAoXGjXuV67CT6IpFYJA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","App","_s","res","fetch","then","json","data","setAllMemesData","memes","meme","setMemeState","top_text","bottom_text","image","allMemesData","getMemeImage","rand_num","Math","floor","random","length","prev","url","handleChange","event","name","value","target","children","className","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","_c","$RefreshReg$"],"sources":["/Users/lojankarunakaran/Web development/React/Meme Generator/my-app/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\n\nfunction App() {\n\n  let res: any\n\n  \n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\")\n    .then(res => res.json)\n    .then(data => setAllMemesData(data.data.memes))\n  }, [])\n\n  let [meme, setMemeState] = useState({\n    top_text: \"\",\n    bottom_text: \"\",\n    image: \"http://i.imgflip.com/1bij.jpg\"\n  })\n\n  let [allMemesData, setAllMemesData] = useState([])\n\n  function getMemeImage() { \n    let rand_num = Math.floor(Math.random() * allMemesData.length)\n    setMemeState(prev => ({\n      ...prev,\n      image: allMemesData[rand_num].url\n    }))\n  }\n\n  function handleChange(event: any) {\n    const {name, value} = event.target\n    setMemeState(prev => ({\n      ...prev,\n      [name] : value,\n    }))\n  }\n\n  return (\n    <div>\n      <div className='input-container'>\n        <input \n          name = \"top_text\"\n          type=\"text\"\n          onChange={handleChange}\n        />\n        <input \n          type=\"text\"\n          name = \"bottom_text\"\n          onChange={handleChange}\n         />\n      </div>\n      <div className='output-container'>\n        <button onClick={getMemeImage}>Get a new meme image</button>\n        <div className='meme'>\n          <img src={meme.image} alt=\"\" />\n          <h2 className=\"meme--text top\">{meme.top_text}</h2>\n          <h2 className=\"meme--text bottom\">{meme.bottom_text}</h2>\n        </div>\n        \n      </div>  \n    </div>\n  )\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}