{"ast":null,"code":"var _jsxFileName = \"/Users/lojankarunakaran/Web development/React/Meme Generator/my-app/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './App.css';\nimport memesData from './memesData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let [meme, setMemeState] = useState({\n    top_text: \"\",\n    bottomText: \"\",\n    image: \"http://i.imgflip.com/1bij.jpg\"\n  });\n  let [allMemesData, setAllMemesData] = useState({\n    data: memesData,\n    top_text: \"\",\n    bottom_text: \"\"\n  });\n  function handleClick(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setAllMemesData;\n  }\n  function getMemeImage() {\n    let rand_num = Math.floor(Math.random() * allMemesData.data.memes.length);\n    setMemeState(prev => ({\n      ...prev,\n      image: allMemesData.data.memes[rand_num].url\n    }));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"top_text\",\n        type: \"text\",\n        onChange: handleClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"bottom_text\",\n        onChange: handleClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"output-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getMemeImage,\n        children: \"Get a new meme image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"meme\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: meme.image,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"meme--text top\",\n          children: \"One does not simply\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"meme--text bottom\",\n          children: \"Walk into Mordor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"C3P5cbRgnNORhxjclql6rakkMiA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","memesData","jsxDEV","_jsxDEV","App","_s","meme","setMemeState","top_text","bottomText","image","allMemesData","setAllMemesData","data","bottom_text","handleClick","event","name","value","target","getMemeImage","rand_num","Math","floor","random","memes","length","prev","url","children","className","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","_c","$RefreshReg$"],"sources":["/Users/lojankarunakaran/Web development/React/Meme Generator/my-app/src/App.tsx"],"sourcesContent":["import { useState } from 'react';\nimport './App.css';\nimport memesData from './memesData';\n\nfunction App() {\n\n  let [meme, setMemeState] = useState({\n    top_text: \"\",\n    bottomText: \"\",\n    image: \"http://i.imgflip.com/1bij.jpg\"\n  })\n\n  let [allMemesData, setAllMemesData] = useState({\n    \n    data: memesData,\n    top_text: \"\",\n    bottom_text: \"\"\n\n  })\n\n  function handleClick(event: any) {\n    const {name, value} = event.target\n    setAllMemesData\n\n  }\n \n  function getMemeImage() { \n    let rand_num = Math.floor(Math.random() * allMemesData.data.memes.length)\n    setMemeState(prev => ({\n      ...prev,\n      image: allMemesData.data.memes[rand_num].url\n    }))\n  }\n\n  return (\n    <div>\n      <div className='input-container'>\n        <input \n          name = \"top_text\"\n          type=\"text\"\n          onChange = {handleClick}\n        />\n        <input \n          type=\"text\"\n          name = \"bottom_text\"\n          onChange={handleClick}\n         />\n      </div>\n      <div className='output-container'>\n        <button onClick={getMemeImage}>Get a new meme image</button>\n        <div className='meme'>\n          <img src={meme.image} alt=\"\" />\n          <h2 className=\"meme--text top\">One does not simply</h2>\n          <h2 className=\"meme--text bottom\">Walk into Mordor</h2>\n        </div>\n        \n      </div>  \n    </div>\n  )\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}